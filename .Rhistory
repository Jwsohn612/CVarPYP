sbj3 <- round(N/3, 0)
clusters <- c(rep(1,sbj1),rep(2,sbj2),rep(3,sbj3))
dataset$G <- unlist(sapply(1:N, function(x) rep(clusters[x],ni[x])))
g1_a1<-function(x) sin(2*pi*x)
g1_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g1_a3<-function(x) sin(2*pi*x^3)
g1_a4<-function(x) -1+0*x
g2_a1<-function(x) cos(2*pi*x)
g2_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g2_a3<-function(x) 2*x
g2_a4<-function(x) 0*x
g3_a1<-function(x) sin(8*(x-0.5))+1.5*exp(-(20^2)*(x-0.5)^2)
g3_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g3_a3<-function(x) 2+0*x
g3_a4<-function(x) 1+0*x
alpha<-list(
list(g1_a1,g1_a2,g1_a3,g1_a4),
list(g2_a1,g2_a2,g2_a3,g2_a4),
list(g3_a1,g3_a2,g3_a3,g3_a4)
)
beta <- c(1, -1)
D <- matrix(c(0.5 , 0.25 , 0.25 , 0.8), nrow=2)
bi <- mvtnorm::rmvnorm(N, mean=c(0,0), sigma = D)
sigma <- 1
Li<-c()
Yi<-c()
for(i in 1:n){
print(i)
the_cluster <- dataset$G[i]
id_ <- id[i]
Li[i] <-
dataset$var1[i]*alpha[[the_cluster]][[1]](dataset$t[i])+
dataset$var2[i]*alpha[[the_cluster]][[2]](dataset$t[i])+
dataset$var3[i]*alpha[[the_cluster]][[3]](dataset$t[i])+
dataset$var4[i]*alpha[[the_cluster]][[4]](dataset$t[i])+
dataset$fix1[i]*beta[1]+
dataset$fix2[i]*beta[2]+
dataset$re1[i]*bi[id_,1]+
dataset$re2[i]*bi[id_,2] +
rnorm(1, mean=0, sd = sigma)
if(Li[i]>=0){Yi[i]<-1}else{Yi[i]<-0}
}
#' Get simulation data
#'
#' @param N The number of subjects
#' @param K The number of clusters
#' @param M The average number of observations
#'
#' @export
get_simulation_data <- function(N, K, M, seed=0){
set.seed(seed)
N <- N
K <- K
p <- 4
q <- 2
r <- 2
ID <- 1:N
ni = rpois(N, M)+1
n = sum(ni)
id=NULL
for(i in 1:N) id=c(id, rep(i,ni[i]))
dataset=data.frame(id,
rep(1,n),
matrix(rnorm(n*(p-1),0,1),n,p-1),
matrix(rnorm(n*(q),0,1),n,q),
rep(1,n),
matrix(rnorm(n*(r-1),0,1),n,r-1),
matrix(runif(n,0,1),n,1))
names(dataset)=c("ID","var1","var2","var3","var4","fix1","fix2","re1","re2","t")
# names(dataset)=c("ID","var1","var2","var3","fix1","fix2","re1","re2","t")
sbj1 <- round(N/3, 0)
sbj2 <- round(N/3, 0)
sbj3 <- round(N/3, 0)
clusters <- c(rep(1,sbj1),rep(2,sbj2),rep(3,sbj3))
dataset$G <- unlist(sapply(1:N, function(x) rep(clusters[x],ni[x])))
g1_a1<-function(x) sin(2*pi*x)
g1_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g1_a3<-function(x) sin(2*pi*x^3)
g1_a4<-function(x) -1+0*x
g2_a1<-function(x) cos(2*pi*x)
g2_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g2_a3<-function(x) 2*x
g2_a4<-function(x) 0*x
g3_a1<-function(x) sin(8*(x-0.5))+1.5*exp(-(20^2)*(x-0.5)^2)
g3_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g3_a3<-function(x) 2+0*x
g3_a4<-function(x) 1+0*x
alpha<-list(
list(g1_a1,g1_a2,g1_a3,g1_a4),
list(g2_a1,g2_a2,g2_a3,g2_a4),
list(g3_a1,g3_a2,g3_a3,g3_a4)
)
beta <- c(1, -1)
D <- matrix(c(0.5 , 0.25 , 0.25 , 0.8), nrow=2)
bi <- mvtnorm::rmvnorm(N, mean=c(0,0), sigma = D)
sigma <- 1
Li<-c()
Yi<-c()
for(i in 1:n){
the_cluster <- dataset$G[i]
id_ <- id[i]
Li[i] <-
dataset$var1[i]*alpha[[the_cluster]][[1]](dataset$t[i])+
dataset$var2[i]*alpha[[the_cluster]][[2]](dataset$t[i])+
dataset$var3[i]*alpha[[the_cluster]][[3]](dataset$t[i])+
dataset$var4[i]*alpha[[the_cluster]][[4]](dataset$t[i])+
dataset$fix1[i]*beta[1]+
dataset$fix2[i]*beta[2]+
dataset$re1[i]*bi[id_,1]+
dataset$re2[i]*bi[id_,2] +
rnorm(1, mean=0, sd = sigma)
if(Li[i]>=0){Yi[i]<-1}else{Yi[i]<-0}
}
dataset$Y <- Yi
dataset
}
data <- get_simulation_data(N=300, K=5, M=10)
library(dplyr)
W <- data %>% select(c('var1','var2','var3','var4'))
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
#' Get simulation data
#'
#' @param N The number of subjects
#' @param K The number of clusters
#' @param M The average number of observations
#'
#' @export
get_simulation_data <- function(N, K, M, seed=0){
set.seed(seed)
N <- N
K <- 3
p <- 4
q <- 2
r <- 2
ID <- 1:N
ni = rpois(N, M)+1
n = sum(ni)
id=NULL
for(i in 1:N) id=c(id, rep(i,ni[i]))
dataset=data.frame(id,
rep(1,n),
matrix(rnorm(n*(p-1),0,1),n,p-1),
matrix(rnorm(n*(q),0,1),n,q),
rep(1,n),
matrix(rnorm(n*(r-1),0,1),n,r-1),
matrix(runif(n,0,1),n,1))
names(dataset)=c("ID","var1","var2","var3","var4","fix1","fix2","re1","re2","t")
# names(dataset)=c("ID","var1","var2","var3","fix1","fix2","re1","re2","t")
sbj1 <- round(N/3, 0)
sbj2 <- round(N/3, 0)
sbj3 <- round(N/3, 0)
clusters <- c(rep(1,sbj1),rep(2,sbj2),rep(3,sbj3))
dataset$G <- unlist(sapply(1:N, function(x) rep(clusters[x],ni[x])))
g1_a1<-function(x) sin(2*pi*x)
g1_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g1_a3<-function(x) sin(2*pi*x^3)
g1_a4<-function(x) -1+0*x
g2_a1<-function(x) cos(2*pi*x)
g2_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g2_a3<-function(x) 2*x
g2_a4<-function(x) 0*x
g3_a1<-function(x) sin(8*(x-0.5))+1.5*exp(-(20^2)*(x-0.5)^2)
g3_a2<-function(x) 2*exp(-200*(x-0.2)^2)+exp(-10*(x-0.6)^2)
g3_a3<-function(x) 2+0*x
g3_a4<-function(x) 1+0*x
alpha<-list(
list(g1_a1,g1_a2,g1_a3,g1_a4),
list(g2_a1,g2_a2,g2_a3,g2_a4),
list(g3_a1,g3_a2,g3_a3,g3_a4)
)
beta <- c(1, -1)
D <- matrix(c(0.5 , 0.25 , 0.25 , 0.8), nrow=2)
bi <- mvtnorm::rmvnorm(N, mean=c(0,0), sigma = D)
sigma <- 1
Li<-c()
Yi<-c()
for(i in 1:n){
the_cluster <- dataset$G[i]
id_ <- id[i]
Li[i] <-
dataset$var1[i]*alpha[[the_cluster]][[1]](dataset$t[i])+
dataset$var2[i]*alpha[[the_cluster]][[2]](dataset$t[i])+
dataset$var3[i]*alpha[[the_cluster]][[3]](dataset$t[i])+
dataset$var4[i]*alpha[[the_cluster]][[4]](dataset$t[i])+
dataset$fix1[i]*beta[1]+
dataset$fix2[i]*beta[2]+
dataset$re1[i]*bi[id_,1]+
dataset$re2[i]*bi[id_,2] +
rnorm(1, mean=0, sd = sigma)
if(Li[i]>=0){Yi[i]<-1}else{Yi[i]<-0}
}
dataset$Y <- Yi
dataset
}
data <- get_simulation_data(N=300, M=10)
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K.max=5,
num_knots = 10,
num_iters = 500)
model.output
devtools::document()
devtools::document()
remove.packages('cvarpyp')
remove.packages('cvarpyp')
devtools::document()
library(cvarpyp)
library(dplyr)
data <- get_simulation_data(N=300, M=10)
data
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K.max=5,
num_knots = 10,
num_iters = 500)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K.max=5,
num_knots = 10,
num_iters = 100)
plot(output$random_effect, row.position=1, col.position=2)
#' Draw the posterior results of random effects
#'
#' @export
plot.random_effect <- function(random_effect_samples, row_position, col_position, burn=NULL){
len <- length(random_effect_samples)
if (is.null(burn)) burn = round(len/2)
post_sample <- map_dbl(random_effect_samples, ~ .x[row_position, col_position])
post_sample <- post_sample[(burn+1):len]
par(mfrow=c(1,2))
hist_ = hist(post_sample, breaks=10, probability=T,main="",xlab="",ylab="",col=gray(0:9/9)[8],border=gray(0:9/9)[8]);box()
lines(hist_$breaks,c(temp.hist$density,0),type="s")
abline(v=quantile(post_sample,c(0.025,0.975)),lty=2)
abline(v=median(post_sample))
mtext("Posterior density",side=2,line=2.3,cex=0.9)
acf(post_sample,main="")
}
plot(output$random_effect, row.position=1, col.position=2)
plot(output$random_effect, row_position=1, col_position=2)
library(purrr)
plot(output$random_effect, row_position=1, col_position=2)
#' Draw the posterior results of random effects
#'
#' @export
plot.random_effect <- function(random_effect_samples, row_position, col_position, burn=NULL){
len <- length(random_effect_samples)
if (is.null(burn)) burn = round(len/2)
post_sample <- map_dbl(random_effect_samples, ~ .x[row_position, col_position])
post_sample <- post_sample[(burn+1):len]
par(mfrow=c(1,2))
hist_ = hist(post_sample, breaks=10, probability=T,main="",xlab="",ylab="",col=gray(0:9/9)[8],border=gray(0:9/9)[8]);box()
lines(hist_$breaks,c(hist_$density,0),type="s")
abline(v=quantile(post_sample,c(0.025,0.975)),lty=2)
abline(v=median(post_sample))
mtext("Posterior density",side=2,line=2.3,cex=0.9)
acf(post_sample,main="")
}
plot(output$random_effect, row_position=1, col_position=2)
#' Draw the posterior results of fixed effects
#'
#' @export
plot.fixed_effect <- function(fixed_effect_samples, position, burn=NULL) {
len <- length(fixed_effect_samples)
if (is.null(burn)) burn = round(len/2)
post_sample <- map_dbl(fixed_effect_samples, ~ .x[position])
post_sample <- post_sample[(burn+1):len]
par(mfrow=c(1,2))
hist_=hist(post_sample, breaks=10, probability=T,main="",xlab="",ylab="",col=gray(0:9/9)[8],border=gray(0:9/9)[8]);box()
lines(hist_$breaks,c(hist_$density,0),type="s")
abline(v=quantile(post_sample,c(0.025,0.975)),lty=2)
abline(v=median(post_sample))
mtext("Posterior density",side=2,line=2.3,cex=0.9)
acf(post_sample,main="")
}
plot(output$fixed_effect, position=2, burn=NULL)
plot(output$random_effect, row_position=1, col_position=2, burn=NULL4)
plot(output$random_effect, row_position=1, col_position=2, burn=NULL)
plot(output$fixed_effect, position=2, burn=NULL)
#' Draw the posterior results of varying coefficients
#'
#' @export
plot.varying_coefficient <- function(varying_coefficient_samples, cluster_number, variable_number){
vc_summary <- varying_coefficient_samples$vc_summary
time_domain <- varying_coefficient_samples$time_domain
vc_mat <- do.call(rbind, map(vc_summary[[cluster_number]], ~.x[,variable_number]))
L <- vc_mat[,1]
M <- vc_mat[,2]
U <- vc_mat[,3]
poly_range <- c(time_domain, rev(time_domain))
poly_coef_UL <- c(L, rev(U))
plot(NULL,type="l",ylim=c(min(vc_mat),max(vc_mat)),xlim=c(min(time_domain),max(time_domain)), xlab="",ylab="")
polygon(poly_range, poly_coef_UL,col=gray(0:9/9)[8],border=F)
lines(time_domain, M,lty=1)
# mtext(paste0('cluster',which_clusters,';varying',j),side=2,line=2.3,cex=0.9)
# mtext("t",side=1,line=2.3,cex=0.9)
}
plot(output$varying_coefficient, cluster_number = 5, variable_number = 1)
#' Draw the posterior results of latent location parameters
#'
#' @export
plot.latent_location <- function(time_range, knots, gamma, cluster_number, variable_number, burn=NULL) {
len <- length(gamma)
if (is.null(burn)) burn = round(len/2)
location_mat <- do.call(rbind, map(gamma[(burn+1):len], ~ .x[[cluster_number]][variable_number,]))
proba <- apply(location_mat,2,mean)
df <- data.frame(knots=c(time_range[1],knots), freq=proba[2:(length(knots)+2)])
plot(df$knots[2:(length(knots)+1)], df$freq[2:(length(knots)+1)], type='h', ylim=c(0,1), xlim=c(time_range[1],time_range[2]), lwd=3,xlab="",ylab="")
points(0,df$freq[1],pch= 1)
segments(0,0,df$knots[1],df$freq[1],lty=2)
# mtext("klp",side=2,line=2.5,cex=0.9)
# mtext("t",side=1,line=2.5,cex=0.9)
}
output$time_range
plot(time_range = output$time.range,
knots = output$knots,
gamma = output$gamma.sample,
cluster_number = 1, variable_number = 2, burn=NULL)
#' Draw the posterior results of latent location parameters
#'
#' @export
plot.latent_location <- function(gamma, cluster_number, variable_number, time_range, knots, burn=NULL) {
len <- length(gamma)
if (is.null(burn)) burn = round(len/2)
location_mat <- do.call(rbind, map(gamma[(burn+1):len], ~ .x[[cluster_number]][variable_number,]))
proba <- apply(location_mat,2,mean)
df <- data.frame(knots=c(time_range[1],knots), freq=proba[2:(length(knots)+2)])
plot(df$knots[2:(length(knots)+1)], df$freq[2:(length(knots)+1)], type='h', ylim=c(0,1), xlim=c(time_range[1],time_range[2]), lwd=3,xlab="",ylab="")
points(0,df$freq[1],pch= 1)
segments(0,0,df$knots[1],df$freq[1],lty=2)
# mtext("klp",side=2,line=2.5,cex=0.9)
# mtext("t",side=1,line=2.5,cex=0.9)
}
knots
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time.range, knots=output$knots, burn=NULL)
#' Draw the posterior results of latent location parameters
#'
#' @export
plot.latent_location <- function(gamma, cluster_number, variable_number, time_range, knot_position, burn=NULL) {
len <- length(gamma)
if (is.null(burn)) burn = round(len/2)
location_mat <- do.call(rbind, map(gamma[(burn+1):len], ~ .x[[cluster_number]][variable_number,]))
proba <- apply(location_mat,2,mean)
df <- data.frame(knot_position=c(time_range[1],knot_position), freq=proba[2:(length(knot_position)+2)])
plot(df$knot_position[2:(length(knot_position)+1)], df$freq[2:(length(knot_position)+1)], type='h', ylim=c(0,1), xlim=c(time_range[1],time_range[2]), lwd=3,xlab="",ylab="")
points(0,df$freq[1],pch= 1)
segments(0,0,df$knot_position[1],df$freq[1],lty=2)
# mtext("klp",side=2,line=2.5,cex=0.9)
# mtext("t",side=1,line=2.5,cex=0.9)
}
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time.range, knot_position=output$knots, burn=NULL)
grids
devtools::document()
devtools::document()
devtools::document()
library(cvarpyp)
library(dplyr)
data <- get_simulation_data(N=300, M=10)
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K.max=5,
num_knots = 10,
num_iters = 100)
library(purrr)
plot(output$random_effect, row_position=1, col_position=2, burn=NULL)
plot(output$fixed_effect, position=2, burn=NULL)
plot(output$varying_coefficient, cluster_number = 5, variable_number = 1)
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time.range, knot_position=output$knots, burn=NULL)
#' Draw the posterior results of latent location parameters
#'
#' @export
plot.latent_location <- function(latent_location, cluster_number, variable_number, time_range, knot_position, burn=NULL) {
len <- length(latent_location)
if (is.null(burn)) burn = round(len/2)
location_mat <- do.call(rbind, map(latent_location[(burn+1):len], ~ .x[[cluster_number]][variable_number,]))
proba <- apply(location_mat,2,mean)
df <- data.frame(knot_position=c(time_range[1],knot_position), freq=proba[2:(length(knot_position)+2)])
plot(df$knot_position[2:(length(knot_position)+1)], df$freq[2:(length(knot_position)+1)], type='h', ylim=c(0,1), xlim=c(time_range[1],time_range[2]), lwd=3,xlab="",ylab="")
points(0,df$freq[1],pch= 1)
segments(0,0,df$knot_position[1],df$freq[1],lty=2)
# mtext("klp",side=2,line=2.5,cex=0.9)
# mtext("t",side=1,line=2.5,cex=0.9)
}
data <- get_simulation_data(N=300, M=10)
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K_max=5,
num_knots = 10,
num_iters = 100)
library(cvarpyp)
devtools::document()
devtools::document()
devtools::document()
library(cvarpyp)
library(dplyr)
library(purrr)
data <- get_simulation_data(N=300, M=10)
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K_max=5,
num_knots = 10,
num_iters = 100)
plot(output$random_effect, row_position=1, col_position=2, burn=NULL)
plot(output$fixed_effect, position=2, burn=NULL)
plot(output$varying_coefficient, cluster_number = 5, variable_number = 1)
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time_range, knot_position=output$knot_position, burn=NULL)
#' Draw the posterior results of latent location parameters
#'
#' @export
plot.latent_location <- function(latent_location_samples, cluster_number, variable_number, time_range, knot_position, burn=NULL) {
len <- length(latent_location_samples)
if (is.null(burn)) burn = round(len/2)
location_mat <- do.call(rbind, map(latent_location_samples[(burn+1):len], ~ .x[[cluster_number]][variable_number,]))
proba <- apply(location_mat,2,mean)
df <- data.frame(knot_position=c(time_range[1],knot_position), freq=proba[2:(length(knot_position)+2)])
plot(df$knot_position[2:(length(knot_position)+1)], df$freq[2:(length(knot_position)+1)], type='h', ylim=c(0,1), xlim=c(time_range[1],time_range[2]), lwd=3,xlab="",ylab="")
points(0,df$freq[1],pch= 1)
segments(0,0,df$knot_position[1],df$freq[1],lty=2)
# mtext("klp",side=2,line=2.5,cex=0.9)
# mtext("t",side=1,line=2.5,cex=0.9)
}
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time_range, knot_position=output$knot_position, burn=NULL)
devtools::document()
library(dplyr)
library(purrr)
data <- get_simulation_data(N=300, M=10)
# Input
ID <- data %>% pull(ID)
W <- data %>% select(c('var1','var2','var3','var4'))
X <- data %>% select(c('fix1','fix2'))
Z <- data %>% select(c('re1','re2'))
t <- data %>% pull(t)
Y <- data %>% pull(Y)
output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y,
K_max=5,
num_knots = 10,
num_iters = 100)
plot(output$random_effect, row_position=1, col_position=2, burn=NULL)
plot(output$fixed_effect, position=2, burn=NULL)
plot(output$varying_coefficient, cluster_number = 5, variable_number = 1)
plot(output$latent_location, cluster_number = 5, variable_number = 1, time_range=output$time_range, knot_position=output$knot_position, burn=NULL)
plot(output$random_effect, row_position=1, col_position=1, burn=NULL)
remove.packages('cvarpyp')

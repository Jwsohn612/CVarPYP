devtools::document()
devtools::document()
devtools::document()
library(cvarpyp)
rcpparma_hello_world()
library(roxygen2)
library(devtools)
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
devtools::document()
devtools::document()
devtools::document()
library(cvarpyp)
library(cvarpyp)
data <- get_simulation_data(N=1200, K=3, M=10)
# Input
ID <- data$dataset$ID
W <- data$dataset[c('var1','var2','var3','var4')]
X <- data$dataset[c('fix1','fix2')]
Z <- data$dataset[c('re1','re2')]
t <- data$dataset$t
Y <- data$dataset$Y
Y
model.output <- CVarPYP(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
document()
devtools::documents()
devtools::document()
library(cvarpyp)
library(cvarpyp)
data <- get_simulation_data(N=1200, K=3, M=10)
# Input
ID <- data$dataset$ID
W <- data$dataset[c('var1','var2','var3','var4')]
X <- data$dataset[c('fix1','fix2')]
Z <- data$dataset[c('re1','re2')]
t <- data$dataset$t
Y <- data$dataset$Y
Y
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
devtools::document()
devtools::document()
library(cvarpyp)
data <- get_simulation_data(N=1200, K=3, M=10)
# Input
ID <- data$dataset$ID
W <- data$dataset[c('var1','var2','var3','var4')]
X <- data$dataset[c('fix1','fix2')]
Z <- data$dataset[c('re1','re2')]
t <- data$dataset$t
Y <- data$dataset$Y
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
data <- get_simulation_data(N=900, K=3, M=10)
# Input
ID <- data$dataset$ID
W <- data$dataset[c('var1','var2','var3','var4')]
X <- data$dataset[c('fix1','fix2')]
Z <- data$dataset[c('re1','re2')]
t <- data$dataset$t
Y <- data$dataset$Y
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
summarise.Psi(Psi.sample=model.output$Psi.sample,
row.position=1, col.position=2)
summarise.beta(beta.sample=model.output$beta.sample,
position=2, burn=NULL)
summarise.cluster(cluster.sample = model.output$cluster.sample)
document()
devtools::document()
devtools::document()
library(cvarpyp)
library(cvarpyp)
data <- get_simulation_data(N=600, K=3, M=10)
# Input
ID <- data$dataset$ID
W <- data$dataset[c('var1','var2','var3','var4')]
X <- data$dataset[c('fix1','fix2')]
Z <- data$dataset[c('re1','re2')]
t <- data$dataset$t
Y <- data$dataset$Y
model.output <- cvarpyp(ID=ID,
W=W,
X=X,
Z=Z,
t=t,
Y=Y, #bi=bi, Li=Li,
K.max=6,
num_knots = 10,
num_iters = 1000)
summarise.Psi(Psi.sample=model.output$Psi.sample,
row.position=1, col.position=2)
summarise_Psi(Psi.sample=model.output$Psi.sample,
row.position=1, col.position=2)
summarise_beta(beta.sample=model.output$beta.sample,
position=2, burn=NULL)
summarise_cluster(cluster.sample = model.output$cluster.sample)
vc_object <- get_post_summary_vc(time_range = model.output$time.range,
knots = model.output$knots,
gamma.sample = model.output$gamma.sample,
theta.sample = model.output$theta.sample, grids=50,  burn=NULL)
model.output$time.range
model.output$knots
vc_object <- get_post_summary_vc(time_range = model.output$time.range,
knots = model.output$knots,
gamma.sample = model.output$gamma.sample,
theta.sample = model.output$theta.sample, grids=50,  burn=NULL)
model.output$knots
model.output$gamma.sample
time_range = model.output$time.range
knots = model.output$knots
gamma.sample = model.output$gamma.sample
theta.sample = model.output$theta.sample
grids=50
burn=NULL
len <- length(gamma.sample)
if (is.null(burn)) burn = round(len/2)
time.domain <- seq(from=time_range[1], to=time_range[2], l=grids)
sd.t <- sd(t)
K <- length(gamma.sample[[1]])
p <- dim(gamma.sample[[1]][[1]])[[1]]
basis_functions <- map(time.domain, ~ matrix(rep(B(.x, knots, sd.t),p),nrow=p, byrow=T ))
basis_functions <- purrr::map(time.domain, ~ matrix(rep(B(.x, knots, sd.t),p),nrow=p, byrow=T ))
# ==== Unit Basis Data
B<- function(t, knots, sd){
dist <- abs(t-knots)
basis <- dist^3
return(c(1, t, basis))
}
basis_functions <- purrr::map(time.domain, ~ matrix(rep(B(.x, knots, sd.t),p),nrow=p, byrow=T ))
# Time => MCMC => Cluster
Bgamma <- map(1:length(time.domain), function(time) {
map(gamma.sample[(burn+1):len], function(gamma) map(gamma, function(each_cls) {
bgam.mat <- each_cls * basis_functions[[time]] # p times knots matrices
}))
})
# Time => MCMC => Cluster
Bgamma <- purrr::map(1:length(time.domain), function(time) {
purrr::map(gamma.sample[(burn+1):len], function(gamma)  purrr::map(gamma, function(each_cls) {
bgam.mat <- each_cls * basis_functions[[time]] # p times knots matrices
}))
})
Tgamma <-  purrr::map((burn+1):len, function(MC) {
purrr::map(1:K, function(k) get_theta_gamma_matrix(p, gamma.sample[[MC]][[k]], theta.sample[[MC]][[k]]) %>% t)
})
library(dplyr)
Tgamma <-  purrr::map((burn+1):len, function(MC) {
purrr::map(1:K, function(k) get_theta_gamma_matrix(p, gamma.sample[[MC]][[k]], theta.sample[[MC]][[k]]) %>% t)
})
get_theta_gamma_matrix <- function(p, unit_gamma, unit_theta){
positions <- c(1,apply(unit_gamma, 1, sum))
indexing <- map(1:p, function(i) {
start <- positions[1:i] %>% sum
end <- start + positions[i+1] - 1
c(start,end)
})
do.call(rbind, map(1:p, function(i) {
index <- indexing[[i]]
temp_gamma <- unit_gamma[i,]
temp_gamma[temp_gamma==1] <- unit_theta[index[1]:index[2]]
temp_gamma
}))
}
Tgamma <-  purrr::map((burn+1):len, function(MC) {
purrr::map(1:K, function(k) get_theta_gamma_matrix(p, gamma.sample[[MC]][[k]], theta.sample[[MC]][[k]]) %>% t)
})
Tgamma <-  purrr::map((burn+1):len, function(MC) {
purrr::map(1:K, function(k) get_theta_gamma_matrix(p, gamma.sample[[MC]][[k]], theta.sample[[MC]][[k]]) %>% t)
})
library(purrr)
Tgamma <-  purrr::map((burn+1):len, function(MC) {
purrr::map(1:K, function(k) get_theta_gamma_matrix(p, gamma.sample[[MC]][[k]], theta.sample[[MC]][[k]]) %>% t)
})
vc_summary <-  map(1:K, function(k) {
map(1:length(time.domain), function(time) {
temp_mat<- do.call(rbind,
map(1:length((burn+1):len), function(MC) {
diag(Bgamma[[time]][[MC]][[k]] %*% Tgamma[[MC]][[k]])
}))
apply(temp_mat,2,function(x) quantile(x, c(0.025,0.5,0.975)))
})
})
list(vc_summary = vc_summary,
time.domain = time.domain)
vc_object <- get_post_summary_vc(time_range = model.output$time.range,
knots = model.output$knots,
gamma.sample = model.output$gamma.sample,
theta.sample = model.output$theta.sample, grids=50,  burn=NULL)
vc_object <- get_post_summary_vc(time_range = model.output$time.range,
knots = model.output$knots,
gamma.sample = model.output$gamma.sample,
theta.sample = model.output$theta.sample, grids=50,  burn=NULL)
model.output$knots
model.output$time.range
grids=50
grids
devtools::document()
remove.packages('jwexample')
remove.packages('jwexample1')
remove.packages('jwexample2')
remove.packages('cvarpyp')
devtools::install_github('jwsohn612/cvarpyp')
library(cvarpyp)
data <- get_simulation_data(N=600, K=3, M=10)
remove.packages('cvarpyp')
remove.packages('cvarpyp')
library(cvarpyp)
data <- get_simulation_data(N=600, K=3, M=10)
remove.packages('cvarpyp')
remove.packages('cvarpyp')
